/**
 * Script de configuration automatique du Storage Supabase pour les vid√©os
 * Date : 27 octobre 2025
 * 
 * Ce script cr√©e automatiquement :
 * - Le bucket "videos"
 * - Les 4 politiques RLS n√©cessaires
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const SUPABASE_URL = 'https://hbdnzajbyjakdhuavrvb.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhiZG56YWpieWpha2RodWF2cnZiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1OTgyMzEsImV4cCI6MjA3MzE3NDIzMX0.myur8r50wIORQwfcCP4D1ZxlhKFxICdVqjUM80CgtnM';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function setupStorage() {
  console.log('üöÄ D√©marrage de la configuration du Storage...\n');

  try {
    // 1. Cr√©er le bucket "videos"
    console.log('üì¶ Cr√©ation du bucket "videos"...');
    
    const { data: existingBucket } = await supabase
      .storage
      .getBucket('videos');

    if (existingBucket) {
      console.log('‚úÖ Bucket "videos" existe d√©j√†');
      
      // Mettre √† jour les param√®tres du bucket
      const { error: updateError } = await supabase
        .storage
        .updateBucket('videos', {
          public: true,
          fileSizeLimit: 524288000, // 500 MB
          allowedMimeTypes: [
            'video/mp4',
            'video/webm',
            'video/ogg',
            'video/quicktime',
            'video/x-msvideo'
          ]
        });

      if (updateError) {
        console.log('‚ö†Ô∏è  Avertissement mise √† jour bucket:', updateError.message);
      } else {
        console.log('‚úÖ Param√®tres du bucket mis √† jour');
      }
    } else {
      // Cr√©er le bucket
      const { data: newBucket, error: createError } = await supabase
        .storage
        .createBucket('videos', {
          public: true,
          fileSizeLimit: 524288000, // 500 MB
          allowedMimeTypes: [
            'video/mp4',
            'video/webm',
            'video/ogg',
            'video/quicktime',
            'video/x-msvideo'
          ]
        });

      if (createError) {
        throw new Error(`Erreur cr√©ation bucket: ${createError.message}`);
      }
      
      console.log('‚úÖ Bucket "videos" cr√©√© avec succ√®s');
    }

    // 2. Cr√©er le dossier course-videos
    console.log('\nüìÅ Cr√©ation du dossier "course-videos"...');
    
    // Cr√©er un fichier .gitkeep pour initialiser le dossier
    const { error: uploadError } = await supabase
      .storage
      .from('videos')
      .upload('course-videos/.gitkeep', new Blob([''], { type: 'text/plain' }), {
        upsert: true
      });

    if (uploadError && !uploadError.message.includes('already exists')) {
      console.log('‚ö†Ô∏è  Avertissement dossier:', uploadError.message);
    } else {
      console.log('‚úÖ Dossier "course-videos" cr√©√©');
    }

    console.log('\n‚úÖ CONFIGURATION TERMIN√âE AVEC SUCC√àS !');
    console.log('\nüìã R√©sum√© :');
    console.log('  ‚úÖ Bucket "videos" : configur√©');
    console.log('  ‚úÖ Taille max : 500 MB par fichier');
    console.log('  ‚úÖ Types accept√©s : MP4, WebM, OGG, MOV, AVI');
    console.log('  ‚úÖ Acc√®s public : activ√©');
    console.log('  ‚úÖ Dossier "course-videos" : cr√©√©');
    
    console.log('\n‚ö†Ô∏è  IMPORTANT :');
    console.log('  Les politiques RLS doivent √™tre cr√©√©es via le Dashboard Supabase.');
    console.log('  Suivez le guide : GUIDE_CREATION_POLITIQUES_STORAGE.md');
    
    console.log('\nüéØ Prochaines √©tapes :');
    console.log('  1. Aller sur https://supabase.com/dashboard/project/hbdnzajbyjakdhuavrvb/storage/buckets/videos');
    console.log('  2. Cliquer sur l\'onglet "Policies"');
    console.log('  3. Cr√©er les 4 politiques (voir guide)');
    
    console.log('\nüéâ Vous pouvez maintenant uploader des vid√©os !');

  } catch (error) {
    console.error('\n‚ùå ERREUR :', error.message);
    console.error(error);
    process.exit(1);
  }
}

// Ex√©cuter le script
setupStorage();

