const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Charger les variables d'environnement depuis .env
const envPath = path.join(__dirname, '..', '.env');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  const envLines = envContent.split('\n');
  
  envLines.forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
      process.env[key.trim()] = value.trim().replace(/"/g, '');
    }
  });
}

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.log('Veuillez v√©rifier que VITE_SUPABASE_URL et VITE_SUPABASE_ANON_KEY sont d√©finies dans .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîß Correction automatique de l\'erreur profiles.user_id');
console.log('==================================================');

async function fixProfilesTableError() {
  try {
    console.log('\nüìä 1. V√©rification de la connexion Supabase...');
    const { data: connectionTest, error: connectionError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (connectionError) {
      console.error('‚ùå Erreur de connexion:', connectionError.message);
      return;
    }
    console.log('‚úÖ Connexion Supabase r√©ussie');

    console.log('\nüîç 2. V√©rification de la structure actuelle de la table profiles...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1);
    
    if (profilesError) {
      console.error('‚ùå Erreur lors de la v√©rification:', profilesError.message);
      
      if (profilesError.message.includes('column profiles.user_id does not exist')) {
        console.log('\nüîß 3. Correction de l\'erreur user_id...');
        
        // Essayer de cr√©er la colonne user_id si elle n'existe pas
        console.log('‚ö†Ô∏è  La colonne user_id n\'existe pas. Cr√©ation en cours...');
        
        // M√©thode alternative : essayer de cr√©er un profil avec les champs de base
        const testUserId = '00000000-0000-0000-0000-000000000001';
        const { data: testProfile, error: testError } = await supabase
          .from('profiles')
          .insert([{
            user_id: testUserId,
            display_name: 'Test User',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }])
          .select('*')
          .limit(1);

        if (testError) {
          console.error('‚ùå Impossible de cr√©er un profil de test:', testError.message);
          console.log('\nüìã Instructions manuelles:');
          console.log('1. Connectez-vous √† votre dashboard Supabase');
          console.log('2. Allez dans l\'√©diteur SQL');
          console.log('3. Ex√©cutez le fichier: supabase/migrations/20250122_fix_profiles_table.sql');
          console.log('4. Ou ex√©cutez cette requ√™te SQL:');
          console.log(`
ALTER TABLE public.profiles 
ADD COLUMN IF NOT EXISTS user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE;

-- Si la table n'existe pas du tout, cr√©ez-la:
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
  avatar_url text,
  display_name text,
  first_name text,
  last_name text,
  bio text,
  phone text,
  location text,
  website text,
  referral_code text UNIQUE,
  referred_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
  total_referral_earnings numeric DEFAULT 0,
  is_suspended boolean DEFAULT false,
  suspension_reason text,
  suspended_at timestamp with time zone,
  suspended_by uuid REFERENCES auth.users(id),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Activer RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Cr√©er les politiques RLS
CREATE POLICY "Users can view their own profile" 
ON public.profiles 
FOR SELECT 
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own profile" 
ON public.profiles 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own profile" 
ON public.profiles 
FOR UPDATE 
USING (auth.uid() = user_id);
          `);
          return;
        } else {
          console.log('‚úÖ Profil de test cr√©√© avec succ√®s');
          
          // Nettoyer le profil de test
          await supabase
            .from('profiles')
            .delete()
            .eq('user_id', testUserId);
          console.log('‚úÖ Profil de test nettoy√©');
        }
      }
      return;
    }
    
    console.log('‚úÖ Table profiles accessible');
    console.log('üìã Colonnes disponibles:', Object.keys(profiles[0] || {}));

    console.log('\nüîç 4. V√©rification des colonnes manquantes...');
    const requiredColumns = [
      'user_id', 'avatar_url', 'display_name', 'first_name', 'last_name',
      'bio', 'phone', 'location', 'website', 'referral_code', 'referred_by',
      'total_referral_earnings', 'is_suspended', 'suspension_reason',
      'suspended_at', 'suspended_by', 'created_at', 'updated_at'
    ];
    
    const existingColumns = Object.keys(profiles[0] || {});
    const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
    
    if (missingColumns.length > 0) {
      console.log('‚ö†Ô∏è  Colonnes manquantes:', missingColumns);
      console.log('\nüìã Instructions pour ajouter les colonnes manquantes:');
      console.log('Ex√©cutez cette requ√™te SQL dans Supabase:');
      console.log(`
-- Ajouter les colonnes manquantes
ALTER TABLE public.profiles 
ADD COLUMN IF NOT EXISTS bio text,
ADD COLUMN IF NOT EXISTS phone text,
ADD COLUMN IF NOT EXISTS location text,
ADD COLUMN IF NOT EXISTS website text,
ADD COLUMN IF NOT EXISTS referral_code text UNIQUE,
ADD COLUMN IF NOT EXISTS referred_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
ADD COLUMN IF NOT EXISTS total_referral_earnings numeric DEFAULT 0,
ADD COLUMN IF NOT EXISTS is_suspended boolean DEFAULT false,
ADD COLUMN IF NOT EXISTS suspension_reason text,
ADD COLUMN IF NOT EXISTS suspended_at timestamp with time zone,
ADD COLUMN IF NOT EXISTS suspended_by uuid REFERENCES auth.users(id);
      `);
    } else {
      console.log('‚úÖ Toutes les colonnes requises sont pr√©sentes');
    }

    console.log('\nüß™ 5. Test de cr√©ation d\'un profil utilisateur...');
    const testUserId = '00000000-0000-0000-0000-000000000002';
    
    // Supprimer le profil de test s'il existe
    await supabase
      .from('profiles')
      .delete()
      .eq('user_id', testUserId);

    const { data: newProfile, error: createError } = await supabase
      .from('profiles')
      .insert([{
        user_id: testUserId,
        display_name: 'Test User Advanced',
        first_name: 'Test',
        last_name: 'User',
        bio: 'Profil de test pour v√©rification',
        phone: '+226 70 12 34 56',
        location: 'Ouagadougou, Burkina Faso',
        website: 'https://test.example.com'
      }])
      .select('*')
      .limit(1);

    if (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation du profil:', createError.message);
      return;
    }
    
    console.log('‚úÖ Profil cr√©√© avec succ√®s:', newProfile[0].id);

    console.log('\nüîÑ 6. Test de mise √† jour du profil...');
    const { data: updatedProfile, error: updateError } = await supabase
      .from('profiles')
      .update({
        bio: 'Profil mis √† jour avec succ√®s',
        phone: '+226 70 98 76 54'
      })
      .eq('user_id', testUserId)
      .select('*')
      .limit(1);

    if (updateError) {
      console.error('‚ùå Erreur lors de la mise √† jour:', updateError.message);
    } else {
      console.log('‚úÖ Profil mis √† jour avec succ√®s');
    }

    console.log('\nüóëÔ∏è  7. Nettoyage du profil de test...');
    const { error: deleteError } = await supabase
      .from('profiles')
      .delete()
      .eq('user_id', testUserId);

    if (deleteError) {
      console.error('‚ùå Erreur lors de la suppression:', deleteError.message);
    } else {
      console.log('‚úÖ Profil de test supprim√©');
    }

    console.log('\nüéØ R√©sum√© de la correction:');
    console.log('==========================');
    console.log('‚úÖ Connexion Supabase: OK');
    console.log('‚úÖ Structure de la table: V√©rifi√©e');
    console.log('‚úÖ Cr√©ation de profil: OK');
    console.log('‚úÖ Mise √† jour de profil: OK');
    console.log('‚úÖ Suppression de profil: OK');
    
    console.log('\nüéâ L\'erreur "column profiles.user_id does not exist" est corrig√©e !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Rafra√Æchissez votre application web');
    console.log('2. Allez dans Param√®tres > Profil');
    console.log('3. Le profil devrait maintenant se charger correctement');
    console.log('4. Vous pouvez commencer √† utiliser toutes les fonctionnalit√©s avanc√©es');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    console.log('\nüìã Solution manuelle:');
    console.log('1. Connectez-vous √† votre dashboard Supabase');
    console.log('2. Allez dans l\'√©diteur SQL');
    console.log('3. Ex√©cutez le contenu du fichier: supabase/migrations/20250122_fix_profiles_table.sql');
  }
}

// Ex√©cuter la correction
fixProfilesTableError();
