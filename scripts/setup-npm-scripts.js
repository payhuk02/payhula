#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * SCRIPT NPM POUR TESTS RESPONSIVIT√â
 * Configuration des commandes pour tester la responsivit√©
 */

console.log('üì¶ CONFIGURATION DES SCRIPTS NPM - TESTS RESPONSIVIT√â\n');

// Fonction pour mettre √† jour le package.json
function updatePackageJson() {
  const packageJsonPath = path.join(__dirname, '..', 'package.json');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    if (!packageJson.scripts) {
      packageJson.scripts = {};
    }
    
    // Scripts de test responsivit√©
    packageJson.scripts['test:responsive'] = 'playwright test --project=chromium --project="Mobile Chrome" --project="Tablet Chrome"';
    packageJson.scripts['test:responsive:all'] = 'playwright test';
    packageJson.scripts['test:responsive:mobile'] = 'playwright test --project="Mobile Chrome" --project="Mobile Safari"';
    packageJson.scripts['test:responsive:desktop'] = 'playwright test --project=chromium --project=firefox --project=webkit';
    packageJson.scripts['test:responsive:visual'] = 'playwright test --grep "R√©gression visuelle"';
    
    // Scripts d'audit
    packageJson.scripts['audit:responsive'] = 'node scripts/responsivity-audit.js';
    packageJson.scripts['audit:lighthouse'] = 'node scripts/lighthouse-test.js';
    packageJson.scripts['audit:all'] = 'npm run audit:responsive && npm run audit:lighthouse';
    
    // Scripts de g√©n√©ration de rapports
    packageJson.scripts['report:csv'] = 'node scripts/generate-csv-report.js';
    packageJson.scripts['report:playwright'] = 'node scripts/generate-playwright-tests.js';
    packageJson.scripts['report:all'] = 'npm run report:csv && npm run report:playwright';
    
    // Scripts de d√©veloppement
    packageJson.scripts['dev:responsive'] = 'npm run dev & npm run test:responsive:mobile';
    packageJson.scripts['build:responsive'] = 'npm run build && npm run test:responsive';
    
    // Scripts de v√©rification
    packageJson.scripts['verify:responsive'] = 'node scripts/verify-product-display.js';
    packageJson.scripts['verify:all'] = 'npm run verify:responsive && npm run audit:responsive';
    
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log('‚úÖ Scripts npm ajout√©s au package.json');
    
    return packageJson.scripts;
  } catch (error) {
    console.error('‚ùå Erreur lors de la modification du package.json:', error.message);
    return null;
  }
}

// Fonction pour cr√©er un fichier README pour les tests
function createTestReadme() {
  const readmeContent = `# üß™ TESTS RESPONSIVIT√â PAYHULA

## üéØ Vue d'ensemble

Ce dossier contient tous les tests et scripts pour v√©rifier la responsivit√© de l'application Payhula, en s'inspirant du design ComeUp.

## üì¶ Scripts Disponibles

### Tests Playwright
\`\`\`bash
# Tests responsivit√© complets (mobile + tablette + desktop)
npm run test:responsive

# Tests sur tous les navigateurs
npm run test:responsive:all

# Tests mobile uniquement
npm run test:responsive:mobile

# Tests desktop uniquement
npm run test:responsive:desktop

# Tests de r√©gression visuelle
npm run test:responsive:visual
\`\`\`

### Audits et Analyses
\`\`\`bash
# Audit responsivit√© complet
npm run audit:responsive

# Tests Lighthouse (performance + accessibilit√©)
npm run audit:lighthouse

# Tous les audits
npm run audit:all
\`\`\`

### G√©n√©ration de Rapports
\`\`\`bash
# G√©n√©rer le rapport CSV des issues
npm run report:csv

# G√©n√©rer les tests Playwright
npm run report:playwright

# G√©n√©rer tous les rapports
npm run report:all
\`\`\`

### V√©rifications
\`\`\`bash
# V√©rifier l'affichage des produits
npm run verify:responsive

# V√©rifications compl√®tes
npm run verify:all
\`\`\`

### D√©veloppement
\`\`\`bash
# D√©marrer le dev avec tests mobile
npm run dev:responsive

# Build avec tests responsivit√©
npm run build:responsive
\`\`\`

## üîß Configuration

### Playwright
- Configuration: \`playwright.config.ts\`
- Tests: \`tests/responsive.spec.ts\`
- Breakpoints: Mobile (375px), Tablette (768px), Desktop (1920px)

### Lighthouse
- Script: \`scripts/lighthouse-test.js\`
- Pages test√©es: Landing, Marketplace, Storefront, ProductDetail, Auth
- M√©triques: Performance, Accessibilit√©, Bonnes pratiques, SEO

## üìä Rapports G√©n√©r√©s

### Fichiers de Rapport
- \`responsivity-audit.json\` - Audit complet des pages
- \`issues.csv\` - Export CSV des probl√®mes d√©tect√©s
- \`detailed-responsivity-report.json\` - Rapport d√©taill√© avec estimations
- \`lighthouse-report.json\` - R√©sultats des tests Lighthouse

### Captures d'√âcran
- \`tests/screenshots/\` - Captures par page et breakpoint
- \`tests/screenshots/product-card-*.png\` - R√©gression visuelle des cartes

### Snippets de Correction
- \`fixes/ResponsiveGrid.tsx\` - Grille responsive ComeUp-style
- \`fixes/ProductCardComeUp.tsx\` - Carte produit optimis√©e
- \`fixes/responsive-utils.ts\` - Utilitaires responsive

## üéØ Sp√©cifications ComeUp

### Desktop (‚â•1024px)
- ‚úÖ **3 produits par ligne** avec gap de 24px
- ‚úÖ **Hauteur uniforme** des cartes (560px)
- ‚úÖ **Images centr√©es** avec object-cover
- ‚úÖ **Border-radius**: 12px
- ‚úÖ **Shadow**: soft (shadow-md)
- ‚úÖ **Hover**: translateY(-6px) scale(1.02) + shadow-xl

### Tablette (641-1023px)
- ‚úÖ **2 produits par ligne** avec proportions r√©duites
- ‚úÖ **Hauteur uniforme** (520px)
- ‚úÖ **M√™mes r√®gles** que desktop

### Mobile (‚â§640px)
- ‚úÖ **1 produit par ligne** occupant 94-98% de largeur
- ‚úÖ **Marges lat√©rales** confortables
- ‚úÖ **Touch targets** minimum 44√ó44px
- ‚úÖ **CTA visible** en bas de carte

## üöÄ Workflow de D√©veloppement

### 1. D√©veloppement
\`\`\`bash
npm run dev:responsive
# D√©marre le serveur + tests mobile en parall√®le
\`\`\`

### 2. Tests Locaux
\`\`\`bash
npm run test:responsive:mobile
# Teste uniquement sur mobile
\`\`\`

### 3. Audit Complet
\`\`\`bash
npm run audit:all
# Lance tous les audits (responsivit√© + Lighthouse)
\`\`\`

### 4. G√©n√©ration de Rapports
\`\`\`bash
npm run report:all
# G√©n√®re tous les rapports et snippets
\`\`\`

### 5. V√©rification Finale
\`\`\`bash
npm run verify:all
# V√©rifie que tout fonctionne correctement
\`\`\`

## üìà M√©triques de Performance

### Crit√®res d'Acceptation
- **LCP**: < 2.5s (mobile)
- **CLS**: < 0.1 (pas de layout shifts)
- **Touch targets**: ‚â• 44px
- **Contrast ratio**: ‚â• 4.5:1
- **Accessibilit√©**: Score Lighthouse ‚â• 90

### Breakpoints Test√©s
- **Mobile**: 375√ó667 (iPhone SE)
- **Tablette**: 768√ó1024 (iPad)
- **Desktop**: 1920√ó1080 (Full HD)

## üîç D√©pannage

### Probl√®mes Courants
1. **Tests Playwright √©chouent**: V√©rifier que le serveur dev est d√©marr√©
2. **Lighthouse timeout**: Augmenter le timeout dans le script
3. **Captures d'√©cran manquantes**: V√©rifier les permissions du dossier tests/

### Commandes de Debug
\`\`\`bash
# Tests en mode debug
npx playwright test --debug

# Tests avec interface graphique
npx playwright test --ui

# Tests sur un navigateur sp√©cifique
npx playwright test --project=chromium
\`\`\`

---

**Derni√®re mise √† jour**: ${new Date().toLocaleDateString('fr-FR')}
**Inspiration**: ComeUp.com, Fiverr, Etsy
**Technologies**: Playwright, Lighthouse, React, TypeScript, TailwindCSS`;

  const readmePath = path.join(__dirname, '..', 'TESTS_RESPONSIVITE.md');
  fs.writeFileSync(readmePath, readmeContent);
  console.log('üìÑ README des tests cr√©√©: TESTS_RESPONSIVITE.md');
}

// Fonction pour cr√©er un script de validation finale
function createValidationScript() {
  const validationScript = `#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * SCRIPT DE VALIDATION FINALE RESPONSIVIT√â
 * V√©rifie que toutes les corrections ont √©t√© appliqu√©es
 */

console.log('‚úÖ VALIDATION FINALE RESPONSIVIT√â PAYHULA\\n');

// Crit√®res de validation
const validationCriteria = {
  marketplace: {
    file: 'src/pages/Marketplace.tsx',
    checks: [
      'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
      'ProductGrid',
      'gap-4 sm:gap-6 lg:gap-8'
    ]
  },
  storefront: {
    file: 'src/pages/Storefront.tsx',
    checks: [
      'ProductGrid',
      'overflow-x-hidden',
      'px-3 sm:px-4 md:px-6 lg:px-8'
    ]
  },
  productCard: {
    file: 'src/components/marketplace/ProductCard.tsx',
    checks: [
      'min-h-[44px]',
      'touch-manipulation',
      'aspect-[16/9]',
      'object-cover'
    ]
  },
  header: {
    file: 'src/components/marketplace/MarketplaceHeader.tsx',
    checks: [
      'min-h-[44px]',
      'touch-manipulation',
      'aria-label',
      'focus-visible:ring-2'
    ]
  },
  styles: {
    file: 'src/styles/product-banners.css',
    checks: [
      'grid-cols-1',
      'grid-cols-2', 
      'grid-cols-3',
      'height: 480px',
      'height: 520px',
      'height: 560px'
    ]
  }
};

// Fonction de validation
function validateFile(criteria) {
  try {
    const fullPath = path.join(__dirname, '..', criteria.file);
    const content = fs.readFileSync(fullPath, 'utf8');
    
    const results = criteria.checks.map(check => ({
      check,
      passed: content.includes(check),
      file: criteria.file
    }));
    
    return results;
  } catch (error) {
    return [{
      check: 'FILE_NOT_FOUND',
      passed: false,
      file: criteria.file,
      error: error.message
    }];
  }
}

// Fonction principale
function main() {
  console.log('üîç Validation des corrections...');
  
  let totalChecks = 0;
  let passedChecks = 0;
  const allResults = [];
  
  Object.entries(validationCriteria).forEach(([name, criteria]) => {
    console.log(\`\\nüìÑ Validation \${name}...\`);
    const results = validateFile(criteria);
    
    results.forEach(result => {
      totalChecks++;
      if (result.passed) {
        passedChecks++;
        console.log(\`   ‚úÖ \${result.check}\`);
      } else {
        console.log(\`   ‚ùå \${result.check}\`);
        if (result.error) {
          console.log(\`      Erreur: \${result.error}\`);
        }
      }
      allResults.push(result);
    });
  });
  
  // R√©sum√©
  console.log('\\n' + '='.repeat(80));
  console.log('üìà R√âSULTATS DE VALIDATION');
  console.log('='.repeat(80));
  
  console.log(\`\\nüìä R√âSUM√â:\`);
  console.log(\`   ‚úÖ Checks r√©ussis: \${passedChecks}/\${totalChecks}\`);
  console.log(\`   ‚ùå Checks √©chou√©s: \${totalChecks - passedChecks}/\${totalChecks}\`);
  console.log(\`   üìà Taux de r√©ussite: \${Math.round((passedChecks / totalChecks) * 100)}%\`);
  
  if (passedChecks === totalChecks) {
    console.log('\\nüéâ VALIDATION R√âUSSIE!');
    console.log('   Toutes les corrections responsivit√© ont √©t√© appliqu√©es.');
    console.log('   L\\'application est pr√™te pour le d√©ploiement.');
  } else {
    console.log('\\n‚ö†Ô∏è  VALIDATION PARTIELLE');
    console.log('   Certaines corrections sont manquantes.');
    console.log('   Consultez les rapports pour plus de d√©tails.');
  }
  
  console.log('\\n‚úÖ Validation termin√©e!');
}

// Ex√©cution
main();
`;

  const validationPath = path.join(__dirname, '..', 'scripts/validate-responsivity.js');
  fs.writeFileSync(validationPath, validationScript);
  console.log('‚úÖ Script de validation cr√©√©: scripts/validate-responsivity.js');
}

// Fonction principale
function main() {
  console.log('üì¶ Configuration des scripts npm...');
  
  const scripts = updatePackageJson();
  createTestReadme();
  createValidationScript();
  
  console.log('\n' + '='.repeat(80));
  console.log('üì¶ SCRIPTS NPM CONFIGUR√âS');
  console.log('='.repeat(80));
  
  if (scripts) {
    console.log('\nüöÄ Scripts disponibles:');
    Object.entries(scripts)
      .filter(([key]) => key.includes('responsive') || key.includes('audit') || key.includes('report') || key.includes('verify'))
      .forEach(([key, value]) => {
        console.log(`   üì¶ ${key}: ${value}`);
      });
  }
  
  console.log('\nüìÅ Fichiers cr√©√©s:');
  console.log('   üì¶ package.json - Scripts npm ajout√©s');
  console.log('   üìÑ TESTS_RESPONSIVITE.md - Documentation des tests');
  console.log('   ‚úÖ scripts/validate-responsivity.js - Script de validation');
  
  console.log('\nüéØ Commandes principales:');
  console.log('   npm run test:responsive - Tests responsivit√©');
  console.log('   npm run audit:all - Audits complets');
  console.log('   npm run verify:all - V√©rifications finales');
  
  console.log('\n‚úÖ Configuration termin√©e!');
}

// Ex√©cution
main();
